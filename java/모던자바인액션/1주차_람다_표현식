# 👽람다 표현식

> 익명 클래스로 다양한 동작을 구현할 수 는 있지만 만족할 만큼 코드가 깔끔하지 않다.<br>
> 이를 더 더 만족스럽게 사용하기 위해서 우리는 람다라는 것을 알아보도록 하자

## ✏ 람다란 무엇인가?

### 1. 람다란?

람다 표현식은 메서드로 전달할 수 있는 익명 함수를 단수화 한 것이라고 할 수 있다.
람다 표현식에는 이름은 없지만 파라미터 리스트, 바디, 반환 형식, 발생할 수 있는 예외 리스트는 가질 수 있다.

### 2. 람다의 특징

- 익명: 보통의 메서드와 달리 람다 표현식은 이름이 존재하지 않는다.
- 함수: 메서드와 달리 클래스에 종속되지 않아서 함수라고 부른다. 그러나 메서드와 동일하게 파라미터 리스트, 바디, 반환 형식, 가능한 예외 리스트는 함수 역시 가질 수 있다.
- 전달: 람다 표현식을 메서드 인수로 전달, 변수로 저장할 수 있다.
- 간결성: 익명 클래스보다 더 간결하게 사용 가능하다.

### 3. 코드로 보는 람다

**기존 람다 코드**

```java

Comparator<Apple> byWeight = new Comparator<Apple>(){
    public int compare(Apple a1, Apple a2){
        return a1.getWeight().compareTo(a2.getWeight());
    }
}

```

**람다를 이용한 코드**

```java
Comparator<Apple> byWeight =
    (Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight());
```

### 4. 람다의 구성

```java
Comparator<Apple> byWeight =
    (Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight());
```

- `(Apple a1, Apple a2)`: 파라미터 리스트
- `->`: 화살표로 람다의 파라미터 리스트와 바디를 구분한다.
- `a1.getWeight().compareTo(a2.getWeight());`: 람다 바디로 람다의 반환값에 해당하는 표현식이다.

## ✏ 람다는 어디에서 사용할까?

### 1. 함수형 인터페이스

- 전체 표현식을 함수형 인터페이스의 인스턴스로 취급할 수 있다.

### 2. 함수 디스크립터

- 함수형 인터페이스의 추상 메서드 시그니처는 람다 표현식의 시그니처를 가리킨다. 람다 표현식의 시그니처를 서술하는 메서드를 함수 디스크립터라고 부른다.

## ✏ 실행 어라운드 패턴

> - 실제 자원을 처리하는 코드를 설정과 정리 두 과정이 둘러싸는 형태를 갖는다. 아래 그림이 이에 해당한다.
> - 또한 해당 작업을 패턴화 시킨 것이 실행 어라운드 패턴이라고 한다.
>   ![alt text](image.png)

### 1. 동작 파라미터화

- 고정된 부분은 냅두고 변화되는 부분은 파라미터화 해서 입력 받는 파라미터에 따라 다른 동작을 할수 있게 한다.

```java
String result = processFile(() -> br.readLine() + br.readLine());
```

### 2. 함수형 인터페이스를 이용해서 동작을 전달

- 함수형 인터페이스 자리에 람다를 사용해서 동작을 전달할 수 있다.

```java
@FuntionalInterface
public interface BufferedReaderProcessor(){
    String process(BufferedReader br) throws IOException;
}
```

👇

```java
public String processFile(BufferedReaderProcessor p) throws IOException{

}
```

### 3. 동작 실행

- 람다 표현식으로 함수형 인터페이스의 추상 메서드 구현을 직접 전달할 수 있으며 전달된 코드는 함수형 인터페이스의 인스턴스로 전달된 코드와 같은 방식으로 처리한다.

```java
public String processFile(BufferedReaderProcessor p) throws IOException{
    try(BufferedReader br = new BufferedReader(new FileReader("data.txt"))){
        return p.process(br); //
    }
}
```

### 4. 람다 전달

- 람다를 이용해 다양한 동작은 processFile 메서드로 전달할 수 있다.

```java
String one = processFile((BufferedReader br) -> br.readLine());

String two = processFile((BufferedReader br) -> br.readLine() + br.readLine());
```

## ✏ 함수형 인터페이스, 형식 추론

### 1. 함수형 인터페이스 사용

- 함수형 인터페이스는 오직 하나의 추상 메서드를 지정한다.
- 함수형 인터페이스의 추상 메서드는 람다 표현식의 시그니처를 묘사한다.
- 이때 함수형 인터페이스의 추상 메서드 시그니처를 함수 디스크립터라고 한다.

![alt text](image-1.png)

#### 1-1. Predicate

```java
@FunctionalInterface
public interface Predicate<T>{
    boolean test(T t);
}

public <T> List<T> filter(List<T> list, Predicated<T> p){
    List<T> results = new ArrayList<>();
    for (T t : list){
        if(p.test(t)){
            results.add(t);
        }
    }

    return results;
}
```

#### 1-2. Consumer

#### 1-3. Function

## ✏ 메서드 참조

## ✏ 람다 만들기
